-module(hoursplayed).
-export([findHours/1, parse/1]).



findHours(ID)->

%io:format("Values: ~p ~n", [ID]),
ssl:start(),
application:start(inets),

{ok,{_,_,JSON}}=httpc:request(get, {"http://api.steampowered.com/IPlayerService/GetRecentlyPlayedGames/v0001/?key=80C9F831FD044A94E0A0FE0792624CD4&steamid="++ID++"&format=json", []},[], []),

Struct=mochijson:decode(JSON),
{struct, JsonData} = Struct,
{struct, GameList} = proplists:get_value("response",JsonData),
%io:format("Values: ~p ~n", [GameList]),
 


case GameList of
		[{"total_count",0}]->"no games";
	 []-> "no games";
	_ -> {array, List}=proplists:get_value("games",GameList),
	%io:format("Went in here bacon: ~p ~n", [ID]),
	A=[parse(N) || N <- List]
end.
%io:format("Values: ~p ~n", [A]).



%case Struct of
%	{_,[H|_]}-> case H of
%		{_,Y}-> case Y of
%
%			{struct,List}-> case lists:keyfind("appid", 1, List) of
%				false->[];
%				{_,{_,ListI}} -> parse_list(ListI,[])
%							end
%		end
%	end
%	end. 

parse_list([],List)->List;
parse_list([H|T],List)->
case H of
	{struct,[Hd|_]} -> case Hd of
		{_,S}->T2=List ++ [S],
		parse_list(T,T2)
	end
end.

parse ([]) -> [];

parse(A)->
{struct, Data} = A,
C=proplists:get_value("appid", Data),
D=proplists:get_value("playtime_2weeks", Data),
{C,D}.





