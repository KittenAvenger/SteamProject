-module(appID).
-export([retrieve/0, start/0, findApp/1, parseID/1]).




start() ->

ssl:start(),
application:start(inets),
retrieve().
%76561197960268093
retrieve () ->

{ok,{_,_,JSON}}=httpc:request(get, {"http://api.steampowered.com/ISteamUser/GetFriendList/v0001/?key=80C9F831FD044A94E0A0FE0792624CD4&steamid=76561197960435530&relationship=friend", []},[], []),

Struct=mochijson:decode(JSON),

{struct, JsonData} = Struct,
{struct, Job} = proplists:get_value("friendslist",JsonData),
{array, Data} = proplists:get_value("friends",Job),

A=[parseID(N) || N <- Data], 

[findApp(X) || X <- A].


parseID(S) ->
{struct, Hey} = S,
D=proplists:get_value("steamid",Hey),
C=string:strip(D, both, $"),
C.


findApp(A) ->
{ok,{_,_,JSON}}=httpc:request(get, {"http://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key=80C9F831FD044A94E0A0FE0792624CD4&steamid="++A++"&format=json", []},[], []),

Struct=mochijson:decode(JSON),
case Struct of
	{_,[H|_]}-> case H of
		{_,Y}-> case Y of

			{struct,List}-> case lists:keyfind("games", 1, List) of
				false->ok;
				{_,{_,ListI}} -> parse_list(ListI,[])
							end
		end
	end
	end. 

parse_list([],List)->List;
parse_list([H|T],List)->
case H of
	{struct,[Hd|_]} -> case Hd of
		{_,S}->T2=List ++ [S],
		parse_list(T,T2)
	end
end.
